services:
  db:
    image: postgres:15
    container_name: sjt_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-smart_job_tracker}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: ghcr.io/${GITHUB_OWNER:-roeeblo}/sjt-server:latest
    container_name: sjt_server_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-smart_job_tracker}
      PORT: 4000
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      ACCESS_TOKEN_TTL: ${ACCESS_TOKEN_TTL:-900}
      REFRESH_TOKEN_TTL: ${REFRESH_TOKEN_TTL:-1209600}
    ports:
      - "4000:4000"

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:4000}
    image: ghcr.io/${GITHUB_OWNER:-roeeblo}/sjt-client:latest
    container_name: sjt_client_prod
    restart: unless-stopped
    depends_on:
      - server
    ports:
      - "5173:80"

volumes:
  db-data:
